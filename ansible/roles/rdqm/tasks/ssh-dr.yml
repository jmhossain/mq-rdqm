- name: Fetch mqm public key
  ansible.builtin.fetch:
    src: "{{ mqm_home }}/.ssh/id_rsa.pub"
    dest: /tmp/dr_mqm_keys
  when: inventory_hostname in groups["dr"]

- name: Wait for mqm key 1
  ansible.builtin.wait_for:
    path: "/tmp/dr_mqm_keys/{{ hostvars[groups['dr'][0]].inventory_hostname }}{{ mqm_home }}/.ssh/id_rsa.pub"
  delegate_to: localhost

- name: Wait for mqm key 2
  ansible.builtin.wait_for:
    path: "/tmp/dr_mqm_keys/{{ hostvars[groups['dr'][1]].inventory_hostname }}{{ mqm_home }}/.ssh/id_rsa.pub"
  delegate_to: localhost

- name: Wait for mqm key 3
  ansible.builtin.wait_for:
    path: "/tmp/dr_mqm_keys/{{ hostvars[groups['dr'][2]].inventory_hostname }}{{ mqm_home }}/.ssh/id_rsa.pub"
  delegate_to: localhost

- name: Register mqm_1_key
  ansible.builtin.set_fact:
    mqm_1_key: "{{ lookup('file', '/tmp/dr_mqm_keys/' + hostvars[groups['dr'][0]].inventory_hostname + '{{ mqm_home }}/.ssh/id_rsa.pub') }}"

- name: Register mqm_2_key
  ansible.builtin.set_fact:
    mqm_2_key: "{{ lookup('file', '/tmp/dr_mqm_keys/' + hostvars[groups['dr'][1]].inventory_hostname + '{{ mqm_home }}/.ssh/id_rsa.pub') }}"

- name: Register mqm_3_key
  ansible.builtin.set_fact:
    mqm_3_key: "{{ lookup('file', '/tmp/dr_mqm_keys/' + hostvars[groups['dr'][2]].inventory_hostname + '{{ mqm_home }}/.ssh/id_rsa.pub') }}"

- name: Get ssh key for node 1
  shell: "ssh-keyscan -t {{ ssh_key_type }} {{ hostvars[groups['dr'][0]].dr_ha_replication }}"
  register: node_1_key

- name: Get ssh key for node 2
  shell: "ssh-keyscan -t {{ ssh_key_type }} {{ hostvars[groups['dr'][1]].dr_ha_replication }}"
  register: node_2_key

- name: Get ssh key for node 3
  shell: "ssh-keyscan -t {{ ssh_key_type }} {{ hostvars[groups['dr'][2]].dr_ha_replication }}"
  register: node_3_key

- name: Set mqm authorized_keys on node 1
  when: inventory_hostname == groups['dr'][0]
  authorized_key:
    user: mqm
    key: "{{ mqm_2_key }}\n{{ mqm_3_key }}"
    exclusive: true

- name: Set mqm authorized_keys on node 2
  when: inventory_hostname == groups['dr'][1]
  authorized_key:
    user: mqm
    key: "{{ mqm_1_key }}\n{{ mqm_3_key }}"
    exclusive: true

- name: Set mqm authorized_keys on node 3
  when: inventory_hostname == groups['dr'][2]
  authorized_key:
    user: mqm
    key: "{{ mqm_1_key }}\n{{ mqm_2_key }}"
    exclusive: true

- name: Allow mqm to ssh from node 1 to node 2
  when: inventory_hostname == groups['dr'][0]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][0] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][1]].dr_ha_replication }}"
    key: "{{ node_2_key.stdout }}"

- name: Allow mqm to ssh from node 1 to node 3
  when: inventory_hostname == groups['dr'][0]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][0] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][2]].dr_ha_replication }}"
    key: "{{ node_3_key.stdout }}"

- name: Allow mqm to ssh from node 2 to node 1
  when: inventory_hostname == groups['dr'][1]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][1] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][0]].dr_ha_replication }}"
    key: "{{ node_1_key.stdout }}"

- name: Allow mqm to ssh from node 2 to node 3
  when: inventory_hostname == groups['dr'][1]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][1] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][2]].dr_ha_replication }}"
    key: "{{ node_3_key.stdout }}"

- name: Allow mqm to ssh from node 3 to node 1
  when: inventory_hostname == groups['dr'][2]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][2] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][0]].dr_ha_replication }}"
    key: "{{ node_1_key.stdout }}"

- name: Allow mqm to ssh from node 3 to node 2
  when: inventory_hostname == groups['dr'][2]
  become: true
  become_user: mqm
  delegate_to: "{{ groups['dr'][2] }}"
  ansible.builtin.known_hosts:
    name: "{{ hostvars[groups['dr'][1]].dr_ha_replication }}"
    key: "{{ node_2_key.stdout }}"

- name: Delete password for mqm
  command: passwd -d mqm

- name: Lock password for mqm
  command: passwd -l mqm

- name: Update rdqm.ini on dr nodes
  ansible.builtin.template:
    src: rdqmdr.ini.j2
    dest: /var/mqm/rdqm.ini
  vars:
    Name1: "{{ hostvars[groups['dr'][0]].inventory_hostname }}"
    Name2: "{{ hostvars[groups['dr'][1]].inventory_hostname }}"
    Name3: "{{ hostvars[groups['dr'][2]].inventory_hostname }}"
    IP1: "{{ hostvars[groups['dr'][0]].rdqm_ha_replication }}"
    IP2: "{{ hostvars[groups['dr'][1]].rdqm_ha_replication }}"
    IP3: "{{ hostvars[groups['dr'][2]].rdqm_ha_replication }}"
  become: true
  become_user: rdqmadmin
  when: inventory_hostname == groups["dr"][0] and mqm_user_ssh is true